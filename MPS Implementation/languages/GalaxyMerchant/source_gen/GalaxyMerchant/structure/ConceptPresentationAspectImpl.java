package GalaxyMerchant.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Assign;
  private ConceptPresentation props_Command;
  private ConceptPresentation props_CommandList;
  private ConceptPresentation props_ConversionAsk;
  private ConceptPresentation props_ConversionDef;
  private ConceptPresentation props_Name;
  private ConceptPresentation props_Num;
  private ConceptPresentation props_ValueAsk;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Assign:
        if (props_Assign == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("assignment of a name to a value");
          cpb.rawPresentation("Assign");
          props_Assign = cpb.create();
        }
        return props_Assign;
      case LanguageConceptSwitch.Command:
        if (props_Command == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Abstract Top-level node");
          props_Command = cpb.create();
        }
        return props_Command;
      case LanguageConceptSwitch.CommandList:
        if (props_CommandList == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Top-level node encapsulating all commands");
          cpb.presentationByName();
          props_CommandList = cpb.create();
        }
        return props_CommandList;
      case LanguageConceptSwitch.ConversionAsk:
        if (props_ConversionAsk == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("query for a conversion from ore to credits");
          cpb.rawPresentation("ConversionAsk");
          props_ConversionAsk = cpb.create();
        }
        return props_ConversionAsk;
      case LanguageConceptSwitch.ConversionDef:
        if (props_ConversionDef == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("definition of a conversion from ores to credits");
          cpb.rawPresentation("ConversionDef");
          props_ConversionDef = cpb.create();
        }
        return props_ConversionDef;
      case LanguageConceptSwitch.Name:
        if (props_Name == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Name");
          props_Name = cpb.create();
        }
        return props_Name;
      case LanguageConceptSwitch.Num:
        if (props_Num == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Num");
          props_Num = cpb.create();
        }
        return props_Num;
      case LanguageConceptSwitch.ValueAsk:
        if (props_ValueAsk == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("query for a value of a list of numbers");
          cpb.rawPresentation("ValueAsk");
          props_ValueAsk = cpb.create();
        }
        return props_ValueAsk;
    }
    return null;
  }
}
