package GalaxyMerchant.generator.templates;

/*Generated by MPS */

import jetbrains.mps.generator.runtime.Generated;
import jetbrains.mps.generator.impl.query.QueryProviderBase;
import jetbrains.mps.generator.template.BaseMappingRuleContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SEnumOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.generator.template.PropertyMacroContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.generator.template.SourceSubstituteMacroNodeContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.generator.template.SourceSubstituteMacroNodesContext;
import java.util.Map;
import jetbrains.mps.generator.impl.query.ReductionRuleCondition;
import java.util.HashMap;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.generator.impl.query.QueryKey;
import jetbrains.mps.generator.template.ReductionRuleQueryContext;
import jetbrains.mps.generator.impl.GenerationFailureException;
import jetbrains.mps.generator.impl.query.SourceNodeQuery;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.generator.impl.query.SourceNodesQuery;
import java.util.Collection;
import jetbrains.mps.util.IterableUtil;
import jetbrains.mps.generator.impl.query.PropertyValueQuery;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.mps.openapi.language.SContainmentLink;

@Generated
public class QueriesGenerated extends QueryProviderBase {
  public QueriesGenerated() {
    super(1);
  }
  public static boolean rule_Condition_3_0(final BaseMappingRuleContext _context) {
    return SEnumOperations.isMember(SPropertyOperations.getEnum(_context.getNode(), PROPS.num$Tpjx), 0x3aaa61a283270201L);
  }
  public static boolean rule_Condition_3_1(final BaseMappingRuleContext _context) {
    return SEnumOperations.isMember(SPropertyOperations.getEnum(_context.getNode(), PROPS.num$Tpjx), 0x3aaa61a283270202L);
  }
  public static boolean rule_Condition_3_2(final BaseMappingRuleContext _context) {
    return SEnumOperations.isMember(SPropertyOperations.getEnum(_context.getNode(), PROPS.num$Tpjx), 0x3aaa61a283270203L);
  }
  public static boolean rule_Condition_3_3(final BaseMappingRuleContext _context) {
    return SEnumOperations.isMember(SPropertyOperations.getEnum(_context.getNode(), PROPS.num$Tpjx), 0x3aaa61a283270204L);
  }
  public static boolean rule_Condition_3_4(final BaseMappingRuleContext _context) {
    return SEnumOperations.isMember(SPropertyOperations.getEnum(_context.getNode(), PROPS.num$Tpjx), 0x3aaa61a283270205L);
  }
  public static boolean rule_Condition_3_5(final BaseMappingRuleContext _context) {
    return SEnumOperations.isMember(SPropertyOperations.getEnum(_context.getNode(), PROPS.num$Tpjx), 0x3aaa61a283270206L);
  }
  public static boolean rule_Condition_3_6(final BaseMappingRuleContext _context) {
    return SEnumOperations.isMember(SPropertyOperations.getEnum(_context.getNode(), PROPS.num$Tpjx), 0x3aaa61a283270207L);
  }
  public static boolean rule_Condition_8_0(final BaseMappingRuleContext _context) {
    return SEnumOperations.isMember(SPropertyOperations.getEnum(_context.getNode(), PROPS.ore$gEtl), 0x3aaa61a28327060eL);
  }
  public static boolean rule_Condition_8_1(final BaseMappingRuleContext _context) {
    return SEnumOperations.isMember(SPropertyOperations.getEnum(_context.getNode(), PROPS.ore$gEtl), 0x3aaa61a28327060dL);
  }
  public static boolean rule_Condition_8_2(final BaseMappingRuleContext _context) {
    return SEnumOperations.isMember(SPropertyOperations.getEnum(_context.getNode(), PROPS.ore$gEtl), 0x3aaa61a28327060cL);
  }
  public static Object propertyMacro_GetValue_1_0(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), PROPS.name$MnvL);
  }
  public static Object propertyMacro_GetValue_4_0(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), PROPS.name$3W_P);
  }
  public static SNode sourceNodeQuery_2_0(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.name$gcTn);
  }
  public static SNode sourceNodeQuery_2_1(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), LINKS.value$Zb_2);
  }
  public static Iterable<SNode> sourceNodesQuery_1_0(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getChildren(_context.getNode(), LINKS.cmd$joww);
  }
  public static Iterable<SNode> sourceNodesQuery_6_0(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getChildren(_context.getNode(), LINKS.names$jgKw);
  }
  public static Iterable<SNode> sourceNodesQuery_7_0(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getChildren(_context.getNode(), LINKS.names$gyWP);
  }
  public static Iterable<SNode> sourceNodesQuery_9_0(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getChildren(_context.getNode(), LINKS.amount$3A3n);
  }
  private final Map<String, ReductionRuleCondition> rrcMethods = new HashMap<String, ReductionRuleCondition>();
  {
    int i = 0;
    rrcMethods.put("5210834078636548462", new RRC(i++));
    rrcMethods.put("5210834078636552738", new RRC(i++));
    rrcMethods.put("5210834078637971548", new RRC(i++));
    rrcMethods.put("5210834078637971856", new RRC(i++));
    rrcMethods.put("5210834078637972197", new RRC(i++));
    rrcMethods.put("5210834078637987910", new RRC(i++));
    rrcMethods.put("5210834078637988584", new RRC(i++));
    rrcMethods.put("5210834078637691502", new RRC(i++));
    rrcMethods.put("5210834078637711519", new RRC(i++));
    rrcMethods.put("5210834078637715851", new RRC(i++));
  }
  @Override
  @NotNull
  public ReductionRuleCondition getReductionRuleCondition(@NotNull QueryKey identity) {
    ReductionRuleCondition query = identity.forTemplateNode(rrcMethods);
    return (query != null ? query : super.getReductionRuleCondition(identity));
  }
  private static class RRC implements ReductionRuleCondition {
    private final int methodKey;
    public RRC(int methodKey) {
      this.methodKey = methodKey;
    }
    @Override
    public boolean check(ReductionRuleQueryContext ctx) throws GenerationFailureException {
      switch (methodKey) {
        case 0:
          return QueriesGenerated.rule_Condition_3_0(ctx);
        case 1:
          return QueriesGenerated.rule_Condition_3_1(ctx);
        case 2:
          return QueriesGenerated.rule_Condition_3_2(ctx);
        case 3:
          return QueriesGenerated.rule_Condition_3_3(ctx);
        case 4:
          return QueriesGenerated.rule_Condition_3_4(ctx);
        case 5:
          return QueriesGenerated.rule_Condition_3_5(ctx);
        case 6:
          return QueriesGenerated.rule_Condition_3_6(ctx);
        case 7:
          return QueriesGenerated.rule_Condition_8_0(ctx);
        case 8:
          return QueriesGenerated.rule_Condition_8_1(ctx);
        case 9:
          return QueriesGenerated.rule_Condition_8_2(ctx);
        default:
          throw new GenerationFailureException(String.format("Inconsistent QueriesGenerated: there's no condition method for rule %s (key: #%d)", ctx.getTemplateReference(), methodKey));
      }
    }
  }
  private final Map<String, SourceNodeQuery> snqMethods = new HashMap<String, SourceNodeQuery>();
  {
    int i = 0;
    snqMethods.put("5210834078636776834", new SNQ(i++));
    snqMethods.put("5210834078636543482", new SNQ(i++));
  }
  @NotNull
  @Override
  public SourceNodeQuery getSourceNodeQuery(@NotNull QueryKey identity) {
    SourceNodeQuery query = identity.forFunctionNode(snqMethods);
    return (query != null ? query : super.getSourceNodeQuery(identity));
  }
  private static class SNQ implements SourceNodeQuery {
    private final int methodKey;
    public SNQ(int methodKey) {
      this.methodKey = methodKey;
    }
    @Nullable
    public SNode evaluate(@NotNull SourceSubstituteMacroNodeContext ctx) throws GenerationFailureException {
      switch (methodKey) {
        case 0:
          return QueriesGenerated.sourceNodeQuery_2_0(ctx);
        case 1:
          return QueriesGenerated.sourceNodeQuery_2_1(ctx);
        default:
          throw new GenerationFailureException(String.format("Inconsistent QueriesGenerated: there's no method for query %s (key: #%d)", ctx.getTemplateReference(), methodKey));
      }
    }
  }
  private final Map<String, SourceNodesQuery> snsqMethods = new HashMap<String, SourceNodesQuery>();
  {
    int i = 0;
    snsqMethods.put("5210834078636831559", new SNsQ(i++));
    snsqMethods.put("5210834078637396718", new SNsQ(i++));
    snsqMethods.put("5210834078637672336", new SNsQ(i++));
    snsqMethods.put("5210834078637760352", new SNsQ(i++));
  }
  @NotNull
  @Override
  public SourceNodesQuery getSourceNodesQuery(@NotNull QueryKey identity) {
    SourceNodesQuery query = identity.forFunctionNode(snsqMethods);
    return (query != null ? query : super.getSourceNodesQuery(identity));
  }
  private static class SNsQ implements SourceNodesQuery {
    private final int methodKey;
    public SNsQ(int methodKey) {
      this.methodKey = methodKey;
    }
    @NotNull
    public Collection<SNode> evaluate(@NotNull SourceSubstituteMacroNodesContext ctx) throws GenerationFailureException {
      switch (methodKey) {
        case 0:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_1_0(ctx));
        case 1:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_6_0(ctx));
        case 2:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_7_0(ctx));
        case 3:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_9_0(ctx));
        default:
          throw new GenerationFailureException(String.format("Inconsistent QueriesGenerated: there's no method for query %s (key: #%d)", ctx.getTemplateReference(), methodKey));
      }
    }
  }
  private final Map<String, PropertyValueQuery> pvqMethods = new HashMap<String, PropertyValueQuery>();
  {
    int i = 0;
    pvqMethods.put("4227298550854492130", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "map_CommandList"));
    pvqMethods.put("5210834078636770854", new PVQ(i++, MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf93d565d10L, 0xf93d565d11L, "value"), null));
  }
  @NotNull
  @Override
  public PropertyValueQuery getPropertyValueQuery(@NotNull QueryKey identity) {
    PropertyValueQuery query = identity.forTemplateNode(pvqMethods);
    return (query != null ? query : super.getPropertyValueQuery(identity));
  }
  private static class PVQ extends PropertyValueQuery.Base {
    private final int methodKey;
    /*package*/ PVQ(int methodKey, SProperty property, String templateValue) {
      super(property, templateValue);
      this.methodKey = methodKey;
    }
    @Nullable
    public Object evaluate(@NotNull PropertyMacroContext ctx) throws GenerationFailureException {
      switch (methodKey) {
        case 0:
          return QueriesGenerated.propertyMacro_GetValue_1_0(ctx);
        case 1:
          return QueriesGenerated.propertyMacro_GetValue_4_0(ctx);
        default:
          throw new GenerationFailureException(String.format("Inconsistent QueriesGenerated: there's no method for query %s (key: #%d)", ctx.getTemplateReference(), methodKey));
      }
    }
  }

  private static final class PROPS {
    /*package*/ static final SProperty num$Tpjx = MetaAdapterFactory.getProperty(0x733ec1a84f04e04L, 0xa4a37cab3336e413L, 0x3aaa61a2832701f4L, 0x3aaa61a283270600L, "num");
    /*package*/ static final SProperty ore$gEtl = MetaAdapterFactory.getProperty(0x733ec1a84f04e04L, 0xa4a37cab3336e413L, 0x3aaa61a2832706dcL, 0x3aaa61a2832706feL, "ore");
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
    /*package*/ static final SProperty name$3W_P = MetaAdapterFactory.getProperty(0x733ec1a84f04e04L, 0xa4a37cab3336e413L, 0x3aaa61a2832706ddL, 0x3aaa61a2832706deL, "name");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink name$gcTn = MetaAdapterFactory.getContainmentLink(0x733ec1a84f04e04L, 0xa4a37cab3336e413L, 0x3aaa61a28327060aL, 0x3aaa61a2832706e9L, "name");
    /*package*/ static final SContainmentLink value$Zb_2 = MetaAdapterFactory.getContainmentLink(0x733ec1a84f04e04L, 0xa4a37cab3336e413L, 0x3aaa61a28327060aL, 0x3aaa61a283270623L, "value");
    /*package*/ static final SContainmentLink cmd$joww = MetaAdapterFactory.getContainmentLink(0x733ec1a84f04e04L, 0xa4a37cab3336e413L, 0x3aaa61a283270713L, 0x3aaa61a283270714L, "cmd");
    /*package*/ static final SContainmentLink names$jgKw = MetaAdapterFactory.getContainmentLink(0x733ec1a84f04e04L, 0xa4a37cab3336e413L, 0x3aaa61a283270708L, 0x3aaa61a283270709L, "names");
    /*package*/ static final SContainmentLink names$gyWP = MetaAdapterFactory.getContainmentLink(0x733ec1a84f04e04L, 0xa4a37cab3336e413L, 0x3aaa61a2832706dcL, 0x3aaa61a2832706f3L, "names");
    /*package*/ static final SContainmentLink amount$3A3n = MetaAdapterFactory.getContainmentLink(0x733ec1a84f04e04L, 0xa4a37cab3336e413L, 0x3aaa61a2832706bdL, 0x3aaa61a2832706c0L, "amount");
  }
}
